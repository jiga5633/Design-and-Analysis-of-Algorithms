import java.io.*;
import java.util.Collections;
import java.util.Scanner;


public class LList {


    public static void main(String[] args) {
        FileInputStream inFile = null;
        PrintWriter outFile = null;
        PrintWriter deBugFile = null;


        try {
            if (args.length != 3) {
                System.err.println("Error: Not enough arguments provided. Please provide input, output, and debug files.");
                System.exit(1);
            }



            inFile = new FileInputStream(args[0]);

            /***************/
       String currentLine = inFile.readLine();
            while(currentLine != null){
                inFile.add(currentLine);
                cuurrentLine = inFile.readLine();
            }
            // Sorting the ArrayList
            Collections.sort(inFile);
             /***************/


            outFile = new PrintWriter(args[1]);


/*****************/

            for(String line : lines){
                outFile.write(line);
                writer.newLine();

            }

/**************/

            deBugFile = new PrintWriter(args[2]);


            ListNode listHead = new ListNode("dummy");
            constructLL(listHead, inFile, deBugFile);
            printList(listHead, outFile);

            ListNode middleNode = findMiddleNode(listHead, deBugFile);


            if (middleNode != null) {
                outFile.println("The word in the middle of the list is: " + middleNode.data);
            }




        } catch (FileNotFoundException e) {
            System.out.println("File not found");
        } finally {
            try {
                if (inFile != null) {
                    inFile.close();
                }
                if (outFile != null) {
                    outFile.close();
                }
                if (deBugFile != null) {
                    deBugFile.close();
                }
            } catch (IOException e) {

                System.out.println("Error closing file");
            }
        }
    }





    private static void constructLL(ListNode listHead, FileInputStream inFile, PrintWriter deBugFile) {
        Scanner reader = new Scanner(new InputStreamReader(inFile));
        //String line;


        deBugFile.write("In constructLL method \n");


        ListNode currentNode = listHead;

        while (reader.hasNext()) {

                    ListNode newNode = new ListNode(reader.next());

                    listInsert(currentNode, newNode, deBugFile);
                    printList(currentNode, deBugFile);
                    currentNode = currentNode.next;
                }


    }



    private static void listInsert(ListNode listHead, ListNode newNode, PrintWriter deBugFile) {
        deBugFile.println("In listInsert method");
/*
        ListNode spot = findSpot(listHead, newNode);
        deBugFile.println("Returns from findSpot where Spot.data is " + spot.data);



        newNode.next = spot.next;
        spot.next = newNode;*/
        ListNode currentNode = listHead;

        while (currentNode.next != null && currentNode.next.data.compareTo(newNode.data) < 0) {
            currentNode = currentNode.next;
        }

        newNode.next = currentNode.next;
        currentNode.next = newNode;
    }

    private static ListNode findSpot(ListNode listHead, ListNode newNode) {
        ListNode spot = listHead;

        while (spot.next != null && spot.next.data.compareTo(newNode.data) < 0) {
            spot = spot.next;
        }

        return spot;
    }

    private static void printList(ListNode listHead, PrintWriter File) {
        ListNode currentNode = listHead.next;

        File.print("listHead -> (" + "dummy" + ", " + currentNode.data + ")");
        int count =0;
        while (currentNode.next != null ) {
            // = currentNode.next;

            count ++;
            if(count % 5 != 0) {
            File.print( " -> (" + currentNode.data + ", " + currentNode.next.data + ")");
                currentNode = currentNode.next;
            }else {
                File.print( " -> (" + currentNode.data + ", " + currentNode.next.data + ")");
                File.print(" \n\n");
                currentNode = currentNode.next;
            }
        }

        File.println(" -> NULL");
    }


    private static ListNode findMiddleNode(ListNode listHead, PrintWriter deBugFile) {
        deBugFile.println("\n\n\nIn findMiddleNode method");
        ListNode walker1 = listHead.next;
        ListNode walker2 = listHead.next;

        while (walker2 != null && walker2.next != null) {
            walker1 = walker1.next;
            walker2 = walker2.next.next;
            deBugFile.println("walker1's data is " + walker1.data);
        }

        return walker1;
    }
}



